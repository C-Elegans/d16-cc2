%{
#include <stdio.h>
#include "ASTNode.hpp"
#include "ASTInclude.hpp"
#include "type.h"
#define YYDEBUG 1
extern int yylex();
extern int yyparse();
extern FILE* yyin;
extern int yyline;
void yyerror(const char* s);
ASTNode* ast;
%}

%union{
	char* sval;
	int ival;
	ASTNode* node;
	
	type_t	type;
}
%token<sval> ID
%token<ival> NUM
%token ELSE IF INT RETURN VOID WHILE
%token PLUS MINUS MULTIPLY DIVIDE
%token CMP_EQUAL CMP_NEQUAL CMP_GREATER CMP_LESS CMP_GREATER_EQ CMP_LESS_EQ
%token T_AND T_OR T_XOR
%nonassoc NUM
%left CMP_EQUAL CMP_NEQUAL CMP_GREATER CMP_LESS CMP_GREATER_EQ CMP_LESS_EQ
%left T_AND T_OR T_XOR
%left PLUS MINUS
%left MULTIPLY DIVIDE

%type<node>program declaration_list declaration simple_expression term var expression
%type<node>expression_stmt selection_stmt statement return_stmt iteration_stmt var_declaration
%type<node>local_declarations compound_stmt statement_list param param_list params fun_declaration
%type<node>args args_list call

%type<type> type_specifier
%nonassoc ELSE
%start program
%%
program:
	declaration_list {ast=$1;}
;
declaration_list:
		declaration_list declaration {$$=$1;$$->add_child($2);}
	|	{$$=new List("Declarations:");}
;
declaration:
	var_declaration {$$=$1;}| fun_declaration {$$=$1;}
;
var_declaration:
		type_specifier ID ';' {$$=new VarDec($2,$1);}
	|   type_specifier ID '[' NUM ']' ';'	{$$=new VarDec($2,$1,new NumNode($4));}
;
type_specifier:
	INT {$$=type_t::T_INT;}| VOID {$$=type_t::T_VOID;}
;
fun_declaration:
	type_specifier ID '(' params ')' compound_stmt {$$=new Function($1,$2,$4,$6);}
;
params:
	param_list {$$=$1;}| VOID {$$= new List("Params:");}
;
param_list:
		param_list ',' param {$$->add_child($3);}
	|   param {$$=new List("Params:"); $$->add_child($1);}
;
param:
		type_specifier ID {$$=new Param($2,$1,false);}
	|	type_specifier ID '[' ']' {$$=new Param($2,$1,true);}
;
compound_stmt:
	'{' local_declarations statement_list '}' {$$= new ASTNode($2,$3);}
;
local_declarations:
	local_declarations var_declaration{$$=$1;$$->add_child($2);}
	| /* empty */{$$= new List("Declarations:");}
;
statement_list:
	statement_list statement {$$=$1;$$->add_child($2);}
	| /* empty */{$$=new List("Statements:");}
;

statement:
		expression_stmt
	|	compound_stmt
	|	selection_stmt
	|	iteration_stmt
	|	return_stmt
;
expression_stmt:
	expression ';'{$$=$1;} | ';' {printf("empty expression\n");$$=nullptr;}
;
selection_stmt:
		IF '(' expression ')' statement {$$ = new Selection($3,$5);}
	|	IF '(' expression ')' statement ELSE statement {$$ = new Selection($3,$5,$7);}
;
iteration_stmt:
	WHILE '(' expression ')' statement {$$= new While($3,$5);}
;
return_stmt:
		RETURN ';' {$$=new Return();}
	|	RETURN expression ';' {$$=new Return($2);}
;
expression:
	var '=' simple_expression {$$=new Assign($1,$3);}
	| simple_expression	{$$=$1;}
;
var:
		ID  {$$=new Var($1);}
	|	ID '[' expression ']' {$$ = new Var($1,$3);}
;

simple_expression:
        simple_expression PLUS simple_expression {$$=new Operator(Operator_type::ADD,$1,$3);}
    |   simple_expression MINUS simple_expression {$$=new Operator(Operator_type::SUBTRACT,$1,$3);}
    |   simple_expression MULTIPLY simple_expression {$$=new Operator(Operator_type::MUL,$1,$3);}
    |   simple_expression DIVIDE simple_expression {$$=new Operator(Operator_type::DIV,$1,$3);}
    |   simple_expression CMP_EQUAL simple_expression {$$=new Operator(Operator_type::CMP_EQ,$1,$3);}
    |   simple_expression CMP_NEQUAL simple_expression {$$=new Operator(Operator_type::CMP_NE,$1,$3);}
    |   simple_expression CMP_GREATER simple_expression {$$=new Operator(Operator_type::CMP_GT,$1,$3);}
    |   simple_expression CMP_LESS simple_expression {$$=new Operator(Operator_type::CMP_LT,$1,$3);}
    |   simple_expression CMP_GREATER_EQ simple_expression {$$=new Operator(Operator_type::CMP_GE,$1,$3);}
    |   simple_expression CMP_LESS_EQ simple_expression {$$=new Operator(Operator_type::CMP_LE,$1,$3);}
    |   simple_expression T_AND simple_expression {$$=new Operator(Operator_type::O_AND,$1,$3);}
    |   simple_expression T_OR simple_expression {$$=new Operator(Operator_type::O_OR,$1,$3);}
    |   simple_expression T_XOR simple_expression {$$=new Operator(Operator_type::O_XOR,$1,$3);}
	|	term {$$=$1;}
;

term:
		'(' simple_expression ')' {$$=$2;}
	|	var {$$=new Eval($1);}
	|	call {$$=$1;}
	|	NUM {$$=new NumNode($1);}
;
call:
	ID '(' args ')' {$$=new Call($1,$3);}
;
args:
		args_list {$$=$1;}
	|	/* empty */ {$$= new List("args:");}
;
args_list:
		args_list ',' expression {$$=$1;$$->add_child($3);}
	|	expression {$$=new List("args:");$$->add_child($1);}
;

%%
void yyerror(const char* s){
	fprintf(stderr, "Parse error on line %d: %s\n",yyline,s);
	exit(1);
}
